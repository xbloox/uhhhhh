--// INIT
if library and library.instances then
    for i, v in next, library.instances do
        v:Destroy()
        library.instances[i] = nil
    end
    task.wait(0.2)
end

--// Services
local Players           = game:GetService("Players")
local TextService       = game:GetService("TextService")
local UserInputService  = game:GetService("UserInputService")
local GuiParent         = gethui()  -- use gethui() instead of CoreGui

--// Variables
getgenv().library     = {}
library.instances     = {}
library.dragging      = nil

--// Helpers
local function createInstance(type_, props)
    local inst = Instance.new(type_)
    for p, v in next, props or {} do inst[p] = v end
    table.insert(library.instances, inst)
    return inst
end

--// Indicator class
local indicator = {}
indicator.__index = indicator

function indicator.new()
    local self = setmetatable({}, indicator)

    self.parent = createInstance("ScreenGui", {
        Name   = "IndicatorGUI",
        Parent = GuiParent,
        Enabled = true
    })

    self.holder = createInstance("Frame", {
        Position             = UDim2.new(0.5, 0, 0.5, 0),
        Size                 = UDim2.new(0, 200, 0, 60),
        AnchorPoint          = Vector2.new(0.5, 0.5),
        BackgroundColor3     = Color3.fromRGB(15, 15, 15),
        BorderSizePixel      = 0,
        BackgroundTransparency = 0.5,
        Parent               = self.parent
    })

    createInstance("UICorner", {
        Parent = self.holder,
        CornerRadius = UDim.new(0, 5)
    })

    createInstance("UIStroke", {
        Parent            = self.holder,
        ApplyStrokeMode   = Enum.ApplyStrokeMode.Contextual,
        Color             = Color3.fromRGB(30,144,255),
        LineJoinMode      = Enum.LineJoinMode.Round,
        Thickness         = 1
    })

    self.avatarThumbnail = createInstance("ImageLabel", {
        Parent               = self.holder,
        Position             = UDim2.new(0, 10, 0, 10),
        Size                 = UDim2.new(0, 50, 1, -20),
        BorderSizePixel      = 0,
        BackgroundTransparency = 1
    })

    self.nameText = createInstance("TextLabel", {
        Parent         = self.avatarThumbnail,
        Text           = "",
        TextSize       = 13,
        Font           = Enum.Font.Code,
        TextColor3     = Color3.fromRGB(30,144,255),
        Position       = UDim2.new(1, 2, 0, 10),
        TextXAlignment = Enum.TextXAlignment.Left,
        BackgroundTransparency = 1
    })

    self.healthText = createInstance("TextLabel", {
        Parent         = self.avatarThumbnail,
        Text           = "",
        TextSize       = 13,
        Font           = Enum.Font.Code,
        TextColor3     = Color3.fromRGB(30,144,255),
        Position       = UDim2.new(1, 2, 0, 23),
        TextXAlignment = Enum.TextXAlignment.Left,
        BackgroundTransparency = 1
    })

    self.healthbarFrame = createInstance("Frame", {
        Parent          = self.avatarThumbnail,
        Size            = UDim2.new(0, 50, 0, 7),
        Position        = UDim2.new(1, 2, 0, 33),
        BorderSizePixel = 0,
        BackgroundColor3 = Color3.fromRGB(15,15,15)
    })

    self.healthbar = createInstance("Frame", {
        Parent          = self.healthbarFrame,
        Size            = UDim2.new(1, 0, 1, 0),
        BackgroundColor3 = Color3.new(0,1,0),
        BorderSizePixel = 0
    })

    createInstance("UICorner", { Parent = self.healthbarFrame,   CornerRadius = UDim.new(0,5) })
    createInstance("UICorner", { Parent = self.healthbar,        CornerRadius = UDim.new(0,5) })

    -- drag support
    self.holder.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            library.dragging = self
        end
    end)
    self.holder.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            library.dragging = nil
        end
    end)

    return self
end

function indicator:setAvatar(userId)
    local thumb = Players:GetUserThumbnailAsync(userId, Enum.ThumbnailType.HeadShot, Enum.ThumbnailSize.Size60x60)
    self.avatarThumbnail.Image = thumb
end

function indicator:setName(name)
    if #name > 8 then
        name = string.sub(name, 1, 8) .. "..."
    end
    self.nameText.Text = name
end

function indicator:setHealth(health)
    health = math.floor(health)
    self.healthText.Text = tostring(health)
    local pct = math.clamp(health / 100, 0, 1)
    self.healthbar.Size = UDim2.new(pct, 0, 1, 0)
    self.healthbar.BackgroundColor3 = Color3.fromHSV(pct * 0.3, 1, 1)
end

function indicator:setVisible(bool)
    self.parent.Enabled = bool
end

-- dragging movement
UserInputService.InputChanged:Connect(function(input)
    if library.dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
        local pos = UserInputService:GetMouseLocation()
        library.dragging.holder.Position = UDim2.new(0, pos.X, 0, pos.Y)
    end
end)

return indicator
