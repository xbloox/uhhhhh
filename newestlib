--// INIT
if library and library.instances then
    for i, v in next, library.instances do
        v:Destroy()
        library.instances[i] = nil
    end
    task.wait(0.2)
end

--// Services
local Players           = game:GetService("Players")
local TextService       = game:GetService("TextService")
local UserInputService  = game:GetService("UserInputService")
local TweenService      = game:GetService("TweenService")
local GuiParent         = gethui()  -- use gethui() instead of CoreGui

--// Variables
getgenv().library     = {}
library.instances     = {}
library.dragging      = nil

--// Helpers
local function createInstance(type_, props)
    local inst = Instance.new(type_)
    for p, v in next, props or {} do
        inst[p] = v
    end
    table.insert(library.instances, inst)
    return inst
end

--// Indicator class
local indicator = {}
indicator.__index = indicator

function indicator.new()
    local self = setmetatable({}, indicator)

    -- main GUI
    self.parent = createInstance("ScreenGui", {
        Name    = "IndicatorGUI",
        Parent  = GuiParent,
        Enabled = true,
    })

    -- background holder
    self.holder = createInstance("Frame", {
        Parent                 = self.parent,
        Position               = UDim2.new(0.5, 0, 0.5, 0),
        Size                   = UDim2.new(0, 200, 0, 60),
        AnchorPoint            = Vector2.new(0.5, 0.5),
        BackgroundColor3       = Color3.fromRGB(15, 15, 15),
        BorderSizePixel        = 0,
        BackgroundTransparency = 0.5,
    })
    createInstance("UICorner", {
        Parent       = self.holder,
        CornerRadius = UDim.new(0, 5),
    })
    createInstance("UIStroke", {
        Parent          = self.holder,
        ApplyStrokeMode = Enum.ApplyStrokeMode.Contextual,
        Color           = Color3.fromRGB(30, 144, 255),
        LineJoinMode    = Enum.LineJoinMode.Round,
        Thickness       = 1,
    })

    -- avatar
    self.avatarThumbnail = createInstance("ImageLabel", {
        Parent                 = self.holder,
        Position               = UDim2.new(0, 10, 0, 10),
        Size                   = UDim2.new(0, 50, 1, -20),
        BorderSizePixel        = 0,
        BackgroundTransparency = 1,
    })

    -- name label
    self.nameText = createInstance("TextLabel", {
        Parent                 = self.avatarThumbnail,
        Text                   = "",
        TextSize               = 13,
        Font                   = Enum.Font.Code,
        TextColor3             = Color3.fromRGB(30, 144, 255),
        Position               = UDim2.new(1, 2, 0, 10),
        TextXAlignment         = Enum.TextXAlignment.Left,
        BackgroundTransparency = 1,
    })

    -- health + status label
    self.healthText = createInstance("TextLabel", {
        Parent                 = self.avatarThumbnail,
        Text                   = "",
        TextSize               = 13,
        Font                   = Enum.Font.Code,
        TextColor3             = Color3.fromRGB(30, 144, 255),
        Position               = UDim2.new(1, 2, 0, 23),
        TextXAlignment         = Enum.TextXAlignment.Left,
        BackgroundTransparency = 1,
    })

    -- health bar background
    self.healthbarFrame = createInstance("Frame", {
        Parent          = self.avatarThumbnail,
        Position        = UDim2.new(1, 2, 0, 33),
        Size            = UDim2.new(0, 130, 0, 7),      -- stretched wider
        BorderSizePixel = 0,
        BackgroundColor3 = Color3.fromRGB(15, 15, 15),
    })
    createInstance("UICorner", {
        Parent       = self.healthbarFrame,
        CornerRadius = UDim.new(0, 5),
    })

    -- actual health fill
    self.healthbar = createInstance("Frame", {
        Parent          = self.healthbarFrame,
        Size            = UDim2.new(1, 0, 1, 0),
        BackgroundColor3 = Color3.new(0, 1, 0),
        BorderSizePixel = 0,
    })
    createInstance("UICorner", {
        Parent       = self.healthbar,
        CornerRadius = UDim.new(0, 5),
    })

    -- drag start: record offset so it tracks under cursor
    self.holder.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            library.dragging = self
            local mousePos = UserInputService:GetMouseLocation()
            self.dragOffset = Vector2.new(mousePos.X, mousePos.Y) - self.holder.AbsolutePosition
        end
    end)

    -- drag end
    self.holder.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            library.dragging = nil
        end
    end)

    return self
end

-- set the avatar image by userId
function indicator:setAvatar(userId)
    local thumb = Players:GetUserThumbnailAsync(
        userId,
        Enum.ThumbnailType.HeadShot,
        Enum.ThumbnailSize.Size60x60
    )
    self.avatarThumbnail.Image = thumb
end

-- clamp name at 14 characters, then add "..."
function indicator:setName(name)
    if #name > 14 then
        name = name:sub(1, 14) .. "..."
    end
    self.nameText.Text = name
end

-- show health, status, animate bar/color
function indicator:setHealth(health, localHealth)
    -- fight-status colors
    local colors = {
        Winning = Color3.new(0, 1, 0),
        Losing  = Color3.new(1, 0, 0),
        Neutral = Color3.fromRGB(105, 105, 105),
    }

    -- default to 100 if not passed
    localHealth = not localHealth and 100 or localHealth

    -- determine win/lose/neutral
    local fightStatus = health > localHealth
        and "Losing"
        or health < localHealth
        and "Winning"
        or "Neutral"

    -- two-color gradient (override via user_settings.indicator.color1/2 if desired)
    local healthbarColors = user_settings and {
        user_settings.indicator.color1,
        user_settings.indicator.color2
    } or {
        Color3.new(0, 1, 0),
        Color3.new(1, 0, 0)
    }

    -- update text
    self.healthText.Text = string.format("%d | %s", health, fightStatus)
    self.healthText.TextColor3 = colors[fightStatus]

    -- animate bar size + color
    local pct = math.clamp(health / 100, 0, 1)
    local targetSize  = UDim2.new(pct, 0, 1, 0)
    local targetColor = healthbarColors[2]:Lerp(healthbarColors[1], pct)
    TweenService:Create(self.healthbar, TweenInfo.new(
        0.2,
        Enum.EasingStyle.Quad,
        Enum.EasingDirection.Out
    ), {
        Size             = targetSize,
        BackgroundColor3 = targetColor,
    }):Play()
end

-- toggle visibility
function indicator:setVisible(bool)
    self.parent.Enabled = bool
end

-- handle the actual drag movement
UserInputService.InputChanged:Connect(function(input)
    if library.dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
        local mousePos = UserInputService:GetMouseLocation()
        local newPos   = Vector2.new(mousePos.X, mousePos.Y) - library.dragging.dragOffset
        library.dragging.holder.Position = UDim2.new(0, newPos.X, 0, newPos.Y)
    end
end)

return indicator
