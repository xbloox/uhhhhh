--// INIT
if library and library.instances then
    for i,v in next, library.instances do
        v:Destroy()
        library.instances[i] = nil
    end
    task.wait(0.2)
end

--// Services
local Players          = game:GetService("Players")
local UserInputService = game:GetService("UserInputService")
local GuiParent        = gethui()

--// Variables
getgenv().library     = {}
library.instances     = {}
library.dragging      = nil

--// Helpers
local function createInstance(class, props)
    local inst = Instance.new(class)
    for p,v in next, props or {} do inst[p] = v end
    table.insert(library.instances, inst)
    return inst
end

--// Indicator class
local indicator = {}
indicator.__index = indicator

function indicator.new()
    local self = setmetatable({}, indicator)

    self.parent = createInstance("ScreenGui", {
        Name    = "IndicatorGUI",
        Parent  = GuiParent,
        Enabled = true
    })

    self.holder = createInstance("Frame", {
        Parent              = self.parent,
        Position            = UDim2.new(0.5,0,0.5,0),
        Size                = UDim2.new(0,200,0,60),
        AnchorPoint         = Vector2.new(0.5,0.5),
        BackgroundColor3    = Color3.fromRGB(15,15,15),
        BorderSizePixel     = 0,
        BackgroundTransparency = 0.5
    })
    createInstance("UICorner", {
        Parent       = self.holder,
        CornerRadius = UDim.new(0,5)
    })
    createInstance("UIStroke", {
        Parent            = self.holder,
        ApplyStrokeMode   = Enum.ApplyStrokeMode.Contextual,
        Color             = Color3.fromRGB(255,0,255),
        LineJoinMode      = Enum.LineJoinMode.Round,
        Thickness         = 1
    })

    -- invisible button for dragging
    self.container = createInstance("TextButton", {
        Parent             = self.parent,
        Position           = self.holder.Position,
        Size               = self.holder.Size,
        BackgroundTransparency = 1,
        Text               = ""
    })

    self.avatarThumbnail = createInstance("ImageLabel", {
        Parent               = self.holder,
        Position             = UDim2.new(0,10,0,10),
        Size                 = UDim2.new(0,50,1,-20),
        BorderSizePixel      = 0,
        BackgroundTransparency = 1
    })

    self.nameText = createInstance("TextLabel", {
        Parent         = self.holder,
        Position       = UDim2.new(0,70,0,10),
        Size           = UDim2.new(1,-80,0,18),
        BackgroundTransparency = 1,
        TextSize       = 14,
        Font           = Enum.Font.Code,
        TextColor3     = Color3.new(1,1,1),
        TextXAlignment = Enum.TextXAlignment.Left
    })

    self.healthbarFrame = createInstance("Frame", {
        Parent            = self.holder,
        Position          = UDim2.new(0,70,1,-20),
        Size              = UDim2.new(1,-80,0,10),
        BorderSizePixel   = 0,
        BackgroundColor3  = Color3.fromRGB(15,15,15)
    })
    createInstance("UICorner", { Parent = self.healthbarFrame, CornerRadius = UDim.new(0,5) })

    self.healthbar = createInstance("Frame", {
        Parent            = self.healthbarFrame,
        Size              = UDim2.new(1,0,1,0),
        BorderSizePixel   = 0,
        BackgroundColor3  = Color3.new(0,1,0)
    })
    createInstance("UICorner", { Parent = self.healthbar, CornerRadius = UDim.new(0,5) })

    -- dragging
    self.container.MouseButton1Down:Connect(function()
        library.dragging = self
    end)
    self.container.MouseButton1Up:Connect(function()
        library.dragging = nil
    end)

    return self
end

function indicator:setAvatar(userId)
    local thumb = Players:GetUserThumbnailAsync(userId,
        Enum.ThumbnailType.HeadShot,
        Enum.ThumbnailSize.Size60x60
    )
    self.avatarThumbnail.Image = thumb
end

function indicator:setName(name)
    if #name > 14 then
        name = name:sub(1,14) .. "..."
    end
    self.nameText.Text = name
end

function indicator:setHealth(health)
    local hp = math.floor(health)
    -- lerp color: green (hp=100) to red (hp=0)
    local t = hp/100
    local col = Color3.new(1-t, t, 0)
    self.healthbar.BackgroundColor3 = col
    self.healthbarFrame.BackgroundColor3 = Color3.fromRGB(15,15,15)
    self.healthbar.Size = UDim2.new(t,0,1,0)
end

function indicator:setVisible(b)
    self.parent.Enabled = b
end

UserInputService.InputChanged:Connect(function(inp)
    if inp.UserInputType == Enum.UserInputType.MouseMovement and library.dragging then
        local mp = UserInputService:GetMouseLocation()
        library.dragging.holder.Position = UDim2.new(0, mp.X, 0, mp.Y)
        library.dragging.container.Position = library.dragging.holder.Position
    end
end)

return indicator
