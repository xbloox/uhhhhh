-- indicator.lua
local Players      = game:GetService("Players")
local TweenService = game:GetService("TweenService")
local gethui       = gethui

-- clean up old instances on reload
if library and library.instances then
    for i, v in next, library.instances do
        v:Destroy()
        library.instances[i] = nil
    end
    task.wait(0.2)
end

getgenv().library     = {}
library.instances     = {}

local function createInstance(type_, props)
    local inst = Instance.new(type_)
    for p, v in next, props or {} do inst[p] = v end
    table.insert(library.instances, inst)
    return inst
end

local indicator = {}
indicator.__index = indicator

function indicator:Draggable(frame, handle)
    local dragStart, frameStart
    handle.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragStart, frameStart = input.Position, frame.Position
            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then dragStart = nil end
            end)
        end
    end)
    handle.InputChanged:Connect(function(input)
        if input.UserInputType==Enum.UserInputType.MouseMovement and dragStart then
            local delta = input.Position - dragStart
            frame.Position = UDim2.new(
                frameStart.X.Scale, frameStart.X.Offset + delta.X,
                frameStart.Y.Scale, frameStart.Y.Offset + delta.Y
            )
        end
    end)
end

function indicator.new()
    local self = setmetatable({}, indicator)
    self.Notifs = {}

    self.parent = createInstance("ScreenGui", {
        Name    = "IndicatorGUI",
        Parent  = gethui(),
        Enabled = true,
    })

    self.holder = createInstance("Frame", {
        Parent                 = self.parent,
        Position               = UDim2.new(0.5,0,0.5,0),
        Size                   = UDim2.new(0,200,0,60),
        AnchorPoint            = Vector2.new(0.5,0.5),
        BackgroundColor3       = Color3.fromRGB(15,15,15),
        BorderSizePixel        = 0,
        BackgroundTransparency = 0.5,
    })
    createInstance("UICorner",{Parent=self.holder,CornerRadius=UDim.new(0,5)})
    createInstance("UIStroke",{
        Parent=self.holder,ApplyStrokeMode=Enum.ApplyStrokeMode.Contextual,
        Color=Color3.fromRGB(30,144,255),LineJoinMode=Enum.LineJoinMode.Round,Thickness=1
    })

    self.avatarThumbnail = createInstance("ImageLabel",{
        Parent=self.holder,Position=UDim2.new(0,10,0,10),Size=UDim2.new(0,50,1,-20),
        BorderSizePixel=0,BackgroundTransparency=1
    })

    self.nameText = createInstance("TextLabel",{
        Parent=self.avatarThumbnail,Text="",TextSize=13,Font=Enum.Font.Code,
        TextColor3=Color3.fromRGB(30,144,255),Position=UDim2.new(1,2,0,10),
        TextXAlignment=Enum.TextXAlignment.Left,BackgroundTransparency=1
    })

    self.healthText = createInstance("TextLabel",{
        Parent=self.avatarThumbnail,Text="",TextSize=13,Font=Enum.Font.Code,
        TextColor3=Color3.fromRGB(30,144,255),Position=UDim2.new(1,2,0,23),
        TextXAlignment=Enum.TextXAlignment.Left,BackgroundTransparency=1
    })

    self.healthbarFrame = createInstance("Frame",{
        Parent=self.avatarThumbnail,Position=UDim2.new(1,2,0,33),
        Size=UDim2.new(0,130,0,7),BorderSizePixel=0,BackgroundColor3=Color3.fromRGB(15,15,15)
    })
    createInstance("UICorner",{Parent=self.healthbarFrame,CornerRadius=UDim.new(0,5)})

    self.healthbar = createInstance("Frame",{
        Parent=self.healthbarFrame,Size=UDim2.new(1,0,1,0),
        BackgroundColor3=Color3.new(0,1,0),BorderSizePixel=0
    })
    createInstance("UICorner",{Parent=self.healthbar,CornerRadius=UDim.new(0,5)})

    self:Draggable(self.holder,self.holder)
    return self
end

function indicator:setAvatar(userId)
    local thumb = Players:GetUserThumbnailAsync(userId,Enum.ThumbnailType.HeadShot,Enum.ThumbnailSize.Size60x60)
    self.avatarThumbnail.Image = thumb
end

function indicator:setName(name)
    if #name>14 then name=name:sub(1,14).."... " end
    self.nameText.Text = name
end

function indicator:setHealth(health, localHealth)
    local colors = {Winning=Color3.new(0,1,0),Losing=Color3.new(1,0,0),Neutral=Color3.fromRGB(105,105,105)}
    localHealth = not localHealth and 100 or localHealth
    local status = health>localHealth and "Losing" or health<localHealth and "Winning" or "Neutral"
    self.healthText.Text     = string.format("%d | %s",health,status)
    self.healthText.TextColor3 = colors[status]
    local pct = math.clamp(health/100,0,1)
    local targetSize = UDim2.new(pct,0,1,0)
    local targetColor = Color3.fromRGB(1-pct,pct,0)
    TweenService:Create(self.healthbar,TweenInfo.new(0.2,Enum.EasingStyle.Quad),{
        Size=targetSize,BackgroundColor3=targetColor
    }):Play()
end

function indicator:setVisible(bool)
    self.parent.Enabled = bool
end

function indicator:ShowHit(Name,Part,Damage,Lethal)
    local Txt = ("Hit %s in the %s for %d"):format(Name,Part,Damage)
    local Col = Lethal and Color3.new(1,0,0) or Color3.new(0,1,0)
    local YOff= #self.Notifs * -35
    local C = createInstance("Frame",{
        Parent=self.parent,Position=UDim2.new(0.5,0,0,10+YOff),
        AnchorPoint=Vector2.new(0.5,0),Size=UDim2.new(0,300,0,30),
        BackgroundTransparency=1
    })
    createInstance("TextLabel",{
        Parent=C,Size=UDim2.new(1,0,1,0),Text=Txt,Font=Enum.Font.Code,TextSize=14,
        TextColor3=Col,BackgroundTransparency=1
    })
    table.insert(self.Notifs,C)
    TweenService:Create(C,TweenInfo.new(1,Enum.EasingStyle.Quad),{
        Position=UDim2.new(0.5,0,0,-20+YOff)
    }):Play()
    task.delay(1,function()
        C:Destroy()
        for i,F in ipairs(self.Notifs) do if F==C then table.remove(self.Notifs,i) break end end
    end)
end

function indicator:ShowMiss(Name)
    local Txt = ("Missed %s"):format(Name)
    local Col = Color3.new(1,1,0)
    local YOff= #self.Notifs * -35
    local C = createInstance("Frame",{
        Parent=self.parent,Position=UDim2.new(0.5,0,0,10+YOff),
        AnchorPoint=Vector2.new(0.5,0),Size=UDim2.new(0,300,0,30),
        BackgroundTransparency=1
    })
    createInstance("TextLabel",{
        Parent=C,Size=UDim2.new(1,0,1,0),Text=Txt,Font=Enum.Font.Code,TextSize=14,
        TextColor3=Col,BackgroundTransparency=1
    })
    table.insert(self.Notifs,C)
    TweenService:Create(C,TweenInfo.new(1,Enum.EasingStyle.Quad),{
        Position=UDim2.new(0.5,0,0,-20+YOff)
    }):Play()
    task.delay(1,function()
        C:Destroy()
        for i,F in ipairs(self.Notifs) do if F==C then table.remove(self.Notifs,i) break end end
    end)
end

return indicator
